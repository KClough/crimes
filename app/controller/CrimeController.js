/*
 * File: app/controller/CrimeController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CrimeController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            MainNav: '#mainNav',
            Map: '#map'
        },

        control: {
            "#mainNav #listCrimesButton": {
                tap: 'onButtonTap'
            },
            "#map #updateMapButton": {
                tap: 'onUpdateMapButtonTap'
            },
            "#CrimeTabPanel #map": {
                maprender: 'onMapMaprender'
            }
        }
    },

    onButtonTap: function(button, e, options) {
        var navView = this.getMainNav();
        var crimeTabPanel = Ext.create('MyApp.view.CrimeTabPanel', {title: 'Crimes!'});
        navView.push(crimeTabPanel);
    },

    onUpdateMapButtonTap: function(button, e, options) {
        this.UpdateCrimes();
    },

    onMapMaprender: function(map, gmap, options) {
        map.setUseCurrentLocation(false);
        this.UpdateCrimes();
    },

    UpdateCrimes: function() {
        var map = this.getMap();
        var lat = map.getMap().getCenter().lat();
        var lon = map.getMap().getCenter().lng();

        console.log('Location: "x":' + lon + ',"y":' + lat);
        console.log("ZOOM: " + map.getMap().getZoom());

        this.getBuffer(lat, lon);
    },

    getBuffer: function(lat, lon) {
        var controller = this;
        var pointValue = '{"geometryType":"esriGeometryPoint","geometries":[{"x":' + lon + ',"y":' + lat + '}]}';

        Ext.Ajax.request({
            url: 'http://gis.phila.gov/ArcGIS/rest/services/Geometry/GeometryServer/relation',
            params: {
                geometries1:pointValue,
                geometries2:'{"geometryType":"esriGeometryPolygon","geometries":[{"rings":[[[-75.0252,40.1331],[-75.0143,40.1385],[-74.9650,40.1166],[-74.9759,40.0509],[-75.0581,39.9907],[-75.1348,39.9523],[-75.1402,39.8866],[-75.2114,39.8647],[-75.2607,39.8757],[-75.2334,39.9359],[-75.2772,39.9742],[-75.2060,40.0126],[-75.2662,40.0564],[-75.2224,40.0947],[-75.1074,40.0454]]]}]}', 
                sr:4326,
                relation:'esriGeometryRelationWithin',
                f:'json'
            },
            success: function(response){
                var text = response.responseText;
                // process server response here
                var value = Ext.JSON.decode(text);
                if(value.relations.length > 0) {
                    console.log("IN CITY");
                    loadBuffer(lon + ',' + lat);
                }
                else {
                    console.log("not IN CITY");
                    loadBuffer('-75.163789,39.952335'); // City Hall
                }
            }
        });

        function loadBuffer(geometries) {
            var requestParams = {};
            requestParams.geometries = geometries;
            requestParams.inSR = 4326;
            requestParams.outSR = 4326;
            requestParams.bufferSR = 102113;
            requestParams.distances = 2825;
            requestParams.unit = 9002;
            requestParams.unionResults = false;
            requestParams.f = 'pjson';

            var today = new Date();
            var maxDate = controller.formatDate(today);
            var oneMonthAgo = new Date();
            oneMonthAgo.setMonth(today.getMonth() - 1);
            var minDate = controller.formatDate(oneMonthAgo);

            Ext.Ajax.request({
                url : 'http://gis.phila.gov/ArcGIS/rest/services/Geometry/GeometryServer/buffer',
                params: requestParams,            
                success: function(response) { 
                    data = Ext.JSON.decode(response.responseText);
                    geometry = data.geometries[0];
                    geometry.spatialReference = { wkid : 4326 };
                    controller.fetchCrimes(Ext.JSON.encode(geometry), minDate, maxDate); 
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    alert(errorMessage);          
                }
            });
        }
    },

    isInCity: function(lon, lat) {

    },

    fetchCrimes: function(bufferGeometry, minDate, maxDate) {
        var controller = this;
        var requestParams = {};
        requestParams.where = 'DISPATCH_DATE>=\'' + minDate + '\' AND DISPATCH_DATE <=\'' + maxDate + '\' AND UCR_GENERAL >= 100 AND UCR_GENERAL <= 600';
        requestParams.geometry = bufferGeometry;
        requestParams.outFields = 'DISPATCH_DATE,DISPATCH_TIME,TEXT_GENERAL_CODE,HOUR,POINT_X,POINT_Y,UCR_GENERAL,LOCATION_BLOCK';
        requestParams.geometryType = 'esriGeometryPolygon';
        requestParams.spatialRel = 'esriSpatialRelContains';
        requestParams.inSR = 4326;
        requestParams.outSR = 4326;
        requestParams.f = 'pjson';

        if(this.markers) {
            Ext.Array.each(this.markers, function(item, index, collection) {
                item.map = null;
            });
        }
        else {
            this.markers = [];
        }

        Ext.Ajax.request({
            url : 'http://gis.phila.gov/ArcGIS/rest/services/PhilaGov/Police_Incidents/MapServer/0/query',
            params: requestParams,
            success: function(response) { 
                var data = Ext.JSON.decode(response.responseText);
                var map = controller.getMap().getMap();
                //var latlng = google.maps.LatLng(x,y);
                var latlng = map.getCenter();
                Ext.Array.each(data.features, function(item, index, collection) {
                    var lon = item.attributes.POINT_X;
                    var lat = item.attributes.POINT_Y;

                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(lat,lon),
                        map: map
                    });
                    controller.markers.push(marker);
                });
            },
            error: function(jqXHR, textStatus, errorThrown) {
                alert(errorMessage);
            }
        });
    },

    formatDate: function(d) {
        var year = d.getFullYear();
        var month = d.getMonth() + 1;
        month = ('0' + month).slice(-2);
        var day = ('0' + d.getDate()).slice(-2);
        return year + '-' + month + '-' + day;
    }

});